What is the difference between val and var in Kotlin?
4 4
Variables declared with var are final, those with val are not
Variables declared with val can only access const members
var is scoped to the nearest function block and val is scoped to the nearest enclosing block
Variables declared with val are final, those with var are not
What does a data class not offer?
4 2
An auto-generated toString() method
Automatic conversion to JSON
Auto-generated hashCode() and equals() methods
A generated copy(...) method, to create copies of instances
Which of these targets does Kotlin currently not support?
4 2
JavaScript
.NET CLR
JVM
LLVM
What are Kotlin coroutines?
4 3
That's how the automatically generated methods hashCode() and equals() in data classes are called
Its Kotlin's term for class methods
They provide asynchronous code without thread blocking
These are functions which accept other functions as arguments or return them
What is the correct way to declare a variable of integer type in Kotlin?
4 2
let i = 42
var i : Int = 42
var i : int = 42
int i = 42
Does Kotlin have primitive data types, such as int, long, float?
4 2
Yes, but Kotlin internally always converts them to their non-primitive counterparts
No, not at language level. But the Kotlin compiler makes use of JVM primitives for best performance
Yes, Kotlin is similar to Java in this respect
No, Kotlin does not have nor user primitive data types
What about Java interoperability?
4 3
Kotlin can easily call Java code while Java cannot access code written in Kotlin
Kotlin provides a compatibility layer for Java interoperability which comes with some cost at runtime
Kotlin can easily call Java code and vice versa
While Kotlin runs on the JVM, it cannot interoperate with Java
Which is a valid function declaration in Kotlin?
4 1
fun sum(a: Int, b: Int): Int
function sum(a: Int, b: Int): Int
int sum(a: Int, b: Int)
int sum(int a, int b)
What does the !! operator do?
4 4
It's the modulo operator in Kotlin, similar to Java's %
It returns the left-hand operand if the operand is not null, otherwise it returns the right hand operand
It compares two values for identity rather than equality
It converts any value to a non-null type and throws an exception if the values is in fact null
What is the key difference between Iterable<T> and Sequence<T> in Kotlin?
4 3
There is no difference, as Sequence<T> is Kotlin's term for Iterable<T>
Iterable<T> work only on immutable collections, Sequence<T> is also applicable to mutable ones
Sequences are processed lazily, Iterables eagerly
Sequences are processed sequentially, Iterables in parallel (multithreaded)